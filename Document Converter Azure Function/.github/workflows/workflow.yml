name: 'Deploy Terraform & App'
on: workflow_dispatch


permissions:
  id-token: write
  contents: read

env:
  AZURE_FUNCTIONAPP_NAME: 'functionappdocconverter5846'                          # set this to your function app name on Azure
  AZURE_FUNCTIONAPP_PACKAGE_PATH: './functionApplication/DocToPdfFunction'       # set this to the path to your function app project, defaults to the repository root
  DOTNET_VERSION: '6.0.x'                                                        # set this to the dotnet version to use 

jobs:
  build-and-deploy:
    name: 'build-and-deploy'
    runs-on: Windows-latest
    environment: production


    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: 'Az CLI login'
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      env:
        STORAGE_ACCOUNT: ${{ secrets.STORAGE_ACCOUNT }}
        CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
        RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      run: terraform init -backend-config="storage_account_name$STORAGE_ACCOUNT" -backend-config="container_name=$CONTAINER_NAME" -backend-config="resource_group_name=$RESOURCE_GROUP_NAME" -backend-config "arm_client_id=$AZURE_CLIENT_ID" -backend-config="arm_subscription_id=AZURE_SUBSCRIPTION_ID" -backend-config="arm_tenant_id=TENANT_ID"

# Generates an execution plan for Terraform
    - name: Terraform Plan
      env:
        STORAGE_ACCOUNT: ${{ secrets.STORAGE_ACCOUNT }}
        CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
        RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        TF_VAR_subscriptionID: ${{ secrets.AZURE_SUBSCRIPTION_ID}}
        TF_VAR_tenantID: ${{ secrets.AZURE_TENANT_ID}}
      run: terraform plan -input=false

    - name: Terraform Apply
      env:
        STORAGE_ACCOUNT: ${{ secrets.STORAGE_ACCOUNT }}
        CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
        RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        TF_VAR_subscriptionID: ${{ secrets.AZURE_SUBSCRIPTION_ID}}
        TF_VAR_tenantID: ${{ secrets.AZURE_TENANT_ID}}
      run: terraform apply -auto-approve -input=false

        


##Deploy Application##       
    - name: Restore Nuget packages
      run: nuget restore './functionApplication/DocToPdfFunction/DocToPdfFunction.sln'


    - name: Setup DotNet ${{ env.DOTNET_VERSION }} Environment
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 'Resolve Project Dependencies Using Dotnet'
      shell: pwsh
      run: |
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        dotnet build --configuration Release --output ./output
        popd

    - name: 'Run Azure Functions Action'
      uses: Azure/functions-action@v1
      id: fa
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
        package: '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/output'
